"""Podalize database module."""

import sqlmodel

from podalize import configs, models


class YoutubeFingerprint(sqlmodel.SQLModel, table=True):
    """Youtube fingerprint table."""

    id: int | None = sqlmodel.Field(
        default=None,
        primary_key=True,
        description="Autogenerated database ID",
    )
    url: str = sqlmodel.Field(
        ...,
        unique=True,
        description="Youtube URL",
    )
    fingerprint: str = sqlmodel.Field(
        ...,
        unique=True,
        description="Unique audio fingerprint",
    )


engine = sqlmodel.create_engine(f"sqlite:///{configs.podalize_path / 'podalize.db'}")
sqlmodel.SQLModel.metadata.create_all(engine)


def get_youtube_record(url: str) -> models.YoutubeRecord | None:
    """Read the database for a YouTube fingerprint record using url."""
    with sqlmodel.Session(engine) as session:
        statement = sqlmodel.select(YoutubeFingerprint).where(
            YoutubeFingerprint.url == url,
        )
        record = session.exec(statement).first()
        if record:
            return models.YoutubeRecord(
                audio_path=configs.podalize_path / record.fingerprint / "audio.wav",
                file_dir=configs.podalize_path / record.fingerprint,
                video_url=record.url,
            )
    return None


def store_youtube_record(youtube_record: models.YoutubeRecord) -> None:
    """Store a YouTube record in the database."""
    with sqlmodel.Session(engine) as session:
        fingerprint = youtube_record.file_dir.name
        statement = sqlmodel.select(YoutubeFingerprint).where(
            YoutubeFingerprint.url == youtube_record.video_url,
        )
        record = session.exec(statement).first()
        if record:
            record.fingerprint = fingerprint
        else:
            record = YoutubeFingerprint(
                url=youtube_record.video_url,
                fingerprint=fingerprint,
            )
        session.add(record)
        session.commit()


def delete_youtube_record(url: str) -> None:
    """Delete a YouTube record from the database by url."""
    with sqlmodel.Session(engine) as session:
        statement = sqlmodel.select(YoutubeFingerprint).where(
            YoutubeFingerprint.url == url,
        )
        record = session.exec(statement).first()
        if record:
            session.delete(record)
            session.commit()
